{"remainingRequest":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Public\\软件\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Public\\软件\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Public\\软件\\app\\src\\components\\AI-report\\custom-report.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Public\\软件\\app\\src\\components\\AI-report\\custom-report.vue","mtime":1557717670468},{"path":"C:\\Users\\Public\\软件\\app\\.babelrc","mtime":1553246877633},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552270042041},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1552270024016},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552270042041},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1552270044128}],"contextDependencies":[],"result":["import _getIterator from \"C:\\\\Users\\\\Public\\\\\\u8F6F\\u4EF6\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Public\\\\\\u8F6F\\u4EF6\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { AIReportTypeList as _AIReportTypeList, GetBuilding as _GetBuilding, GetFloorbyBuilding as _GetFloorbyBuilding, GetReportLabelList as _GetReportLabelList, GetCustomFormExport } from '@/api/api.js';\nexport default {\n  data: function data() {\n    return {\n      resultContent: [],\n      dataName: '',\n      //资料名称\n      contentConfiguration: '',\n      //内容配置\n      showContentConfiguration: false,\n      //显示内容配置弹窗\n      contentConfigurationList: [],\n      //内容配置列表\n      storiedBuilding: '全部',\n      //楼栋\n      showStoriedBuilding: false,\n      //显示楼栋弹窗\n      storiedBuildingList: [],\n      //楼栋列表\n      floor: '全部',\n      //楼层\n      showFloor: false,\n      //显示楼层弹窗\n      floorList: [],\n      //楼层列表\n      currentDate: new Date(),\n      startTime: require('moment')().format('YYYY-MM-DD'),\n      //开始时间\n      showStartTime: false,\n      //显示开始时间\n      startTimeBox: '',\n      //开始时间容器\n      endTime: require('moment')().format('YYYY-MM-DD'),\n      //结束时间\n      showEndTime: false,\n      //显示结束时间\n      endTimeBox: '',\n      //结束时间容器\n      ProjectID: localStorage.getItem('projectid'),\n      defaultMarkList: [{\n        ID: 1,\n        LabelName: \"质量管理\",\n        LabelValue: \"8\"\n      }, {\n        ID: 2,\n        LabelName: \"安全管理\",\n        LabelValue: \"9\"\n      }, {\n        ID: 3,\n        LabelName: \"三算对比\",\n        LabelValue: \"10\"\n      }],\n      // 默认标签列表\n      markList: [] //动态标签列表\n\n    };\n  },\n  mounted: function mounted() {\n    this.ProjectID = localStorage.getItem('projectid');\n    this.AIReportTypeList(); //获取内容配置下拉\n\n    this.GetBuilding();\n    this.GetReportLabelList();\n  },\n  methods: {\n    AIReportTypeList: function AIReportTypeList() {\n      var _this = this;\n\n      //获取内容配置下拉\n      this.load();\n      this.Request(_AIReportTypeList({})).then(function (res) {\n        // console.log('获取内容配置下拉',res)\n        _this.$toast.clear();\n\n        if (res.StatusCode == '200') {\n          _this.contentConfigurationList = res.Detiel;\n        } else {\n          _this.$message({\n            type: \"error\",\n            message: res.Message,\n            center: \"true\"\n          });\n        }\n      });\n    },\n    GetBuilding: function () {\n      var _GetBuilding2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res, DetielAll, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //获取项目的楼栋信息\n                this.load();\n                _context.next = 3;\n                return this.Request(_GetBuilding({\n                  projectid: this.ProjectID\n                }));\n\n              case 3:\n                res = _context.sent;\n                // console.log('获取项目的楼栋信息',res)\n                this.$toast.clear();\n\n                if (!(res.StatusCode == '200')) {\n                  _context.next = 33;\n                  break;\n                }\n\n                if (!(res.Detiel[0].text.indexOf('全部') > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.storiedBuildingList = res.Detiel;\n                _context.next = 31;\n                break;\n\n              case 10:\n                DetielAll = [{\n                  id: \"全部\",\n                  text: \"全部\"\n                }];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 14;\n\n                for (_iterator = _getIterator(res.Detiel); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  item = _step.value;\n                  DetielAll.push(item);\n                }\n\n                _context.next = 22;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](14);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 22:\n                _context.prev = 22;\n                _context.prev = 23;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 25:\n                _context.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context.finish(25);\n\n              case 29:\n                return _context.finish(22);\n\n              case 30:\n                this.storiedBuildingList = DetielAll;\n\n              case 31:\n                _context.next = 34;\n                break;\n\n              case 33:\n                this.$message({\n                  type: \"error\",\n                  message: res.Message,\n                  center: \"true\"\n                });\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 18, 22, 30], [23,, 25, 29]]);\n      }));\n\n      function GetBuilding() {\n        return _GetBuilding2.apply(this, arguments);\n      }\n\n      return GetBuilding;\n    }(),\n    GetFloorbyBuilding: function GetFloorbyBuilding() {\n      var _this2 = this;\n\n      //根据楼栋获取楼层\n      var params = {\n        projectid: this.ProjectID,\n        building: this.storiedBuilding\n      };\n      this.load();\n      this.Request(_GetFloorbyBuilding(params)).then(function (res) {\n        _this2.$toast.clear(); // console.log('根据楼栋获取楼层',res)\n\n\n        if (res.StatusCode == '200') {\n          if (res.Detiel.length != 0) {\n            //优化当楼栋选择全部\n            if (res.Detiel[0].text.indexOf('全部') > 0) {\n              _this2.floorList = res.Detiel;\n            } else {\n              var DetielAll = [{\n                id: \"全部\",\n                text: \"全部\"\n              }];\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = _getIterator(res.Detiel), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var item = _step2.value;\n                  DetielAll.push(item);\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n\n              _this2.floorList = DetielAll;\n            }\n          }\n        } else {\n          _this2.$message({\n            type: \"error\",\n            message: res.Message,\n            center: \"true\"\n          });\n        }\n      });\n    },\n    GetReportLabelList: function () {\n      var _GetReportLabelList2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //获取标签列表接口\n                this.load();\n                _context2.next = 3;\n                return this.Request(_GetReportLabelList({}));\n\n              case 3:\n                res = _context2.sent;\n                // console.log('获取标签列表接口',res)\n                this.$toast.clear();\n\n                if (res.StatusCode == '200') {\n                  this.markList = res.Detiel;\n                } else {\n                  this.$message({\n                    type: \"error\",\n                    message: res.Message,\n                    center: \"true\"\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function GetReportLabelList() {\n        return _GetReportLabelList2.apply(this, arguments);\n      }\n\n      return GetReportLabelList;\n    }(),\n    confirmStoriedBuilding: function confirmStoriedBuilding(value, index) {\n      //确定楼栋\n      console.log(value);\n      this.storiedBuilding = value.text;\n      this.showStoriedBuilding = false;\n      this.GetFloorbyBuilding();\n    },\n    isShowFloor: function isShowFloor() {\n      //选择楼层\n      if (this.storiedBuilding == '全部') {\n        this.$message({\n          type: \"warning\",\n          message: '请先选择楼栋',\n          center: \"true\"\n        });\n      } else {\n        this.showFloor = true;\n      }\n    },\n    confirmFloor: function confirmFloor(value, index) {\n      //确定楼层\n      this.floor = value.text;\n      this.showFloor = false;\n    },\n    confirmStartTime: function confirmStartTime(type, value) {\n      //确定开始时间\n      this.startTime = this.formatterTime(this.startTimeBox);\n      this.showStartTime = false;\n    },\n    confirmEndTime: function confirmEndTime() {\n      //确定结束时间\n      this.endTime = this.formatterTime(this.endTimeBox);\n      this.showEndTime = false;\n    },\n    startTimeChange: function startTimeChange(e) {\n      //当值变化时触发的事件\n      var endTimeArr = e.getValues();\n      this.startTimeBox = \"\".concat(endTimeArr[0], \"-\").concat(endTimeArr[1], \"-\").concat(endTimeArr[2], \"  \").concat(endTimeArr[3], \":\").concat(endTimeArr[4], \":00\");\n    },\n    endTimeChange: function endTimeChange(e) {\n      //当值变化时触发的事件\n      var endTimeArr = e.getValues();\n      this.endTimeBox = \"\".concat(endTimeArr[0], \"-\").concat(endTimeArr[1], \"-\").concat(endTimeArr[2], \"  \").concat(endTimeArr[3], \":\").concat(endTimeArr[4], \":00\");\n    },\n    // 默认设置标签数据\n    setRemarkData: function setRemarkData(val) {\n      if (val) {\n        console.log(val);\n        this.dataName = val.LabelName;\n        this.resultContent = [];\n        this.resultContent.push(val.LabelValue);\n      }\n    },\n    submitRetrieval: function submitRetrieval() {\n      var _this3 = this;\n\n      //确定检索\n      if (!this.dataName) {\n        this.$message({\n          type: \"warning\",\n          message: '请输入资料名称',\n          center: \"true\"\n        });\n        return;\n      }\n\n      if (this.resultContent == '') {\n        this.$message({\n          type: \"warning\",\n          message: '请选择内容配置',\n          center: \"true\"\n        });\n        return;\n      }\n\n      var params = {\n        ProjectID: this.ProjectID,\n        ReportName: this.dataName,\n        AIReportType: this.resultContent,\n        BuildingName: this.storiedBuilding,\n        LevelName: this.floor,\n        StartTime: this.startTime,\n        EndTime: this.endTime // console.log(params)\n\n      };\n      this.load();\n      this.Request(GetCustomFormExport(params)).then(function (res) {\n        _this3.$toast.clear(); // console.log('自定义表格导出',res)\n\n\n        if (res.StatusCode == '200') {\n          _this3.$message({\n            type: 'success',\n            message: res.Message,\n            center: 'true'\n          });\n\n          _this3.$router.push({\n            path: 'nav/index/AI-report',\n            query: {\n              'active': 4\n            }\n          });\n        } else {\n          _this3.$message({\n            type: \"error\",\n            message: res.Message,\n            center: \"true\"\n          });\n        }\n      });\n    },\n    //返回\n    goBack: function goBack() {\n      this.$router.back(-1);\n    },\n\n    /**\r\n     * 格式化日期\r\n     */\n    formatterTime: function formatterTime(time) {\n      if (!time) return \"\";\n      return time.substring(0, time.indexOf(\"u\"));\n    },\n    toggle: function toggle(index, item) {\n      //复选框\n      this.$refs.checkboxes[index].toggle();\n      var contentVal = '';\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _getIterator(this.resultContent), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _item = _step3.value;\n          // 返现对应的文字\n          contentVal += this.contentConfigurationList[_item].text;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.contentConfiguration = contentVal;\n    }\n  }\n};",{"version":3,"sources":["custom-report.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- custom-report自定义报表 -->\r\n<template>\r\n <div class='container-ai-report'>\r\n    <!-- 返回键+自定义报表 -->\r\n    <van-nav-bar title=\"自定义报表\" @click-left=\"goBack\"  fixed :border=\"true\" :z-index=\"100\" >\r\n        <span class=\"el-icon-arrow-left fontsize\" slot=\"left\"></span>\r\n    </van-nav-bar>\r\n    <!-- 自定义列表 -->\r\n    <div class=\"custom-report-list\">\r\n      <ul>\r\n        <li>\r\n          <span class=\"custom-report-list-span\">资料名称：</span>\r\n          <input type=\"text\" class=\"custom-report-list-input\" v-model=\"dataName\" placeholder=\"请输入名称\">\r\n        </li>\r\n        <li class=\"content-class\">\r\n          <van-cell title=\"内容配置：\" :value=\"contentConfiguration\" @click=\"showContentConfiguration = true\" is-link/>\r\n        </li>\r\n        <li>\r\n          <van-cell title=\"楼栋：\" :value=\"storiedBuilding\" @click=\"showStoriedBuilding = true\" is-link/>\r\n        </li>\r\n        <li>\r\n          <van-cell title=\"楼层：\" :value=\"floor\" @click=\"isShowFloor\" is-link/>\r\n        </li>\r\n        <li>\r\n          <van-cell title=\"开始时间：\" :value=\"startTime\" @click=\"showStartTime = true\" readonly=\"readonly\" is-link/>\r\n        </li>\r\n        <li>\r\n          <van-cell title=\"结束时间：\" :value=\"endTime\" @click=\"showEndTime = true\" readonly=\"readonly\" is-link/>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <!-- 标签 -->\r\n    <div class=\"custom-report-tag\">\r\n      <p>标签：</p>\r\n      <div class=\"custom-report-tag-list\">\r\n        <span v-for=\"(span,index) in defaultMarkList\" :key=\"index+1\" @click=\"setRemarkData(span)\">{{span.LabelName}}</span>\r\n        <span v-for=\"(span,index) in markList\" :key=\"index\" @click=\"setRemarkData(span)\">{{span.LabelName}}</span>\r\n      </div>\r\n    </div>\r\n    <!-- 确定检索 -->\r\n    <van-button size=\"large\" class=\"custom-report-bt\" @click=\"submitRetrieval\">确认检索</van-button>\r\n    <div>\r\n        <van-nav-bar\r\n                fixed\r\n                title=\"数据列表\"\r\n                right-text=\"退出登录\"\r\n        />\r\n        <div class=\"list-content\" id=\"list-content\">\r\n            <van-pull-refresh v-model=\"isLoading\" @refresh=\"onRefresh\">\r\n                <van-list\r\n                    v-model=\"loading\"\r\n                    :finished=\"finished\"\r\n                    @load=\"onLoad\"\r\n                    :offset=\"10\"\r\n                >\r\n \r\n                </van-list>\r\n            </van-pull-refresh>\r\n        </div>\r\n \r\n    </div>\r\n    <!-- 内容配置弹窗 -->\r\n    <van-popup v-model=\"showContentConfiguration\" position=\"bottom\">\r\n      <van-checkbox-group v-model=\"resultContent\" class=\"content-class-popup\">\r\n        <van-cell-group>\r\n          <van-cell\r\n            v-for=\"(item, index) in contentConfigurationList\"\r\n            clickable\r\n            :key=\"index+1\"\r\n            :title=\"item.text\"\r\n            @click=\"toggle(index,item)\"\r\n          >\r\n          <van-checkbox :name=\"item.id\" ref=\"checkboxes\" />\r\n          </van-cell>\r\n        </van-cell-group>\r\n      </van-checkbox-group>\r\n      <!-- <van-picker\r\n        show-toolbar\r\n        :columns=\"contentConfigurationList\"\r\n        @confirm=\"confirmContentConfiguration\"\r\n        @cancel=\"showContentConfiguration = false\"\r\n      /> -->\r\n    </van-popup>\r\n    <!-- 楼栋弹窗 -->\r\n    <van-popup v-model=\"showStoriedBuilding\" position=\"bottom\">\r\n      <van-picker\r\n        show-toolbar\r\n        :columns=\"storiedBuildingList\"\r\n        @confirm=\"confirmStoriedBuilding\"\r\n        @cancel=\"showStoriedBuilding = false\"\r\n      />\r\n    </van-popup>\r\n    <!-- 楼层弹窗 -->\r\n    <van-popup v-model=\"showFloor\" position=\"bottom\">\r\n      <van-picker\r\n        show-toolbar\r\n        :columns=\"floorList\"\r\n        @confirm=\"confirmFloor\"\r\n        @cancel=\"showFloor = false\"\r\n      />\r\n    </van-popup>\r\n    <!-- 开始时间 -->\r\n    <van-popup v-model=\"showStartTime\" position=\"bottom\" :overlay=\"true\">\r\n      <van-datetime-picker\r\n        type=\"date\"\r\n        v-model=\"currentDate\"\r\n        @confirm=\"confirmStartTime\"\r\n        @cancel=\"showStartTime = false\"\r\n        @change=\"startTimeChange\"\r\n      />\r\n    </van-popup>\r\n    <!-- 结束时间 -->\r\n    <van-popup v-model=\"showEndTime\" position=\"bottom\" :overlay=\"true\">\r\n      <van-datetime-picker\r\n        type=\"date\"\r\n        v-model=\"currentDate\"\r\n        @confirm=\"confirmEndTime\"\r\n        @cancel=\"showEndTime = false\"\r\n        @change=\"endTimeChange\"\r\n      />\r\n    </van-popup>\r\n </div>\r\n</template>\r\n<script type='textecmascript-6'>\r\nimport { AIReportTypeList,GetBuilding,GetFloorbyBuilding,GetReportLabelList,GetCustomFormExport } from '@/api/api.js'\r\n\r\nexport default{\r\n  data(){\r\n    return{\r\n      resultContent: [],\r\n      dataName:'', //资料名称\r\n      contentConfiguration:'', //内容配置\r\n      showContentConfiguration:false, //显示内容配置弹窗\r\n      contentConfigurationList: [], //内容配置列表\r\n      storiedBuilding:'全部', //楼栋\r\n      showStoriedBuilding:false, //显示楼栋弹窗\r\n      storiedBuildingList: [], //楼栋列表\r\n      floor:'全部', //楼层\r\n      showFloor:false, //显示楼层弹窗\r\n      floorList: [], //楼层列表\r\n      currentDate: new Date(),\r\n      startTime:require('moment')().format('YYYY-MM-DD'), //开始时间\r\n      showStartTime:false, //显示开始时间\r\n      startTimeBox:'', //开始时间容器\r\n      endTime:require('moment')().format('YYYY-MM-DD'), //结束时间\r\n      showEndTime:false, //显示结束时间\r\n      endTimeBox:'', //结束时间容器\r\n      ProjectID: localStorage.getItem('projectid'),\r\n      defaultMarkList: [\r\n        {ID:1,LabelName:\"质量管理\",LabelValue:\"8\"},\r\n        {ID:2,LabelName:\"安全管理\",LabelValue:\"9\"},\r\n        {ID:3,LabelName:\"三算对比\",LabelValue:\"10\"}\r\n      ], // 默认标签列表\r\n      markList:[], //动态标签列表\r\n    }\r\n  },\r\n  mounted(){\r\n    this.ProjectID = localStorage.getItem('projectid')\r\n    this.AIReportTypeList() //获取内容配置下拉\r\n    this.GetBuilding()\r\n    this.GetReportLabelList()\r\n  },\r\n  methods:{\r\n    AIReportTypeList(){ //获取内容配置下拉\r\n      this.load();\r\n      this.Request(AIReportTypeList({})).then(res=>{\r\n        // console.log('获取内容配置下拉',res)\r\n        this.$toast.clear();\r\n        if(res.StatusCode=='200'){\r\n          this.contentConfigurationList = res.Detiel\r\n        }else{\r\n          this.$message({type:\"error\",message:res.Message,center:\"true\"});\r\n        }\r\n      })\r\n    },\r\n    async GetBuilding(){ //获取项目的楼栋信息\r\n      this.load();\r\n      let res = await this.Request(GetBuilding({projectid: this.ProjectID}))\r\n      // console.log('获取项目的楼栋信息',res)\r\n      this.$toast.clear();\r\n      if(res.StatusCode=='200'){\r\n        // 是否含有全部\r\n        if(res.Detiel[0].text.indexOf('全部') > 0){\r\n          this.storiedBuildingList = res.Detiel\r\n        }else{\r\n          let DetielAll = [{id: \"全部\", text: \"全部\"}]\r\n          for(let item of res.Detiel){\r\n            DetielAll.push(item)\r\n          }\r\n          this.storiedBuildingList = DetielAll\r\n        }\r\n      }else{\r\n        this.$message({type:\"error\",message:res.Message,center:\"true\"});\r\n      }\r\n    },\r\n    GetFloorbyBuilding(){ //根据楼栋获取楼层\r\n      let params = {\r\n        projectid: this.ProjectID,\r\n        building: this.storiedBuilding\r\n      }\r\n      this.load();\r\n      this.Request(GetFloorbyBuilding(params)).then(res=>{\r\n        this.$toast.clear();\r\n        // console.log('根据楼栋获取楼层',res)\r\n        if(res.StatusCode=='200'){\r\n          if(res.Detiel.length != 0){ //优化当楼栋选择全部\r\n            if(res.Detiel[0].text.indexOf('全部') > 0){\r\n              this.floorList = res.Detiel\r\n            }else{\r\n              let DetielAll = [{id: \"全部\", text: \"全部\"}]\r\n              for(let item of res.Detiel){\r\n                DetielAll.push(item)\r\n              }\r\n              this.floorList = DetielAll\r\n            }\r\n          }\r\n        }else{\r\n          this.$message({type:\"error\",message:res.Message,center:\"true\"});\r\n        }\r\n      })\r\n    },\r\n    async GetReportLabelList(){ //获取标签列表接口\r\n      this.load();\r\n      let res = await this.Request(GetReportLabelList({}))\r\n      // console.log('获取标签列表接口',res)\r\n      this.$toast.clear();\r\n      if(res.StatusCode=='200'){\r\n        this.markList = res.Detiel\r\n      }else{\r\n        this.$message({type:\"error\",message:res.Message,center:\"true\"});\r\n      }\r\n    },\r\n    confirmStoriedBuilding(value,index){ //确定楼栋\r\n      console.log(value)\r\n      this.storiedBuilding = value.text\r\n      this.showStoriedBuilding = false\r\n      this.GetFloorbyBuilding()\r\n    },\r\n    isShowFloor(){ //选择楼层\r\n      if(this.storiedBuilding == '全部'){\r\n        this.$message({type:\"warning\",message:'请先选择楼栋',center:\"true\"});\r\n      }else{\r\n        this.showFloor = true\r\n      }\r\n    },\r\n    confirmFloor(value,index){ //确定楼层\r\n      this.floor = value.text\r\n      this.showFloor = false\r\n    },\r\n    confirmStartTime(type, value){ //确定开始时间\r\n      this.startTime = this.formatterTime(this.startTimeBox)\r\n      this.showStartTime = false\r\n    },\r\n    confirmEndTime(){ //确定结束时间\r\n      this.endTime = this.formatterTime(this.endTimeBox)\r\n      this.showEndTime = false\r\n    },\r\n    startTimeChange(e){ //当值变化时触发的事件\r\n      let endTimeArr = e.getValues();\r\n      this.startTimeBox = `${endTimeArr[0]}-${endTimeArr[1]}-${endTimeArr[2]}  ${endTimeArr[3]}:${endTimeArr[4]}:00`\r\n    },\r\n    endTimeChange(e){ //当值变化时触发的事件\r\n      let endTimeArr = e.getValues();\r\n      this.endTimeBox = `${endTimeArr[0]}-${endTimeArr[1]}-${endTimeArr[2]}  ${endTimeArr[3]}:${endTimeArr[4]}:00`\r\n    },\r\n    // 默认设置标签数据\r\n    setRemarkData(val){\r\n      if(val){\r\n        console.log(val)\r\n        this.dataName = val.LabelName\r\n        this.resultContent = []\r\n        this.resultContent.push(val.LabelValue)\r\n      }\r\n    },\r\n    submitRetrieval(){ //确定检索\r\n      if(!this.dataName){\r\n        this.$message({type:\"warning\",message:'请输入资料名称',center:\"true\"});\r\n        return\r\n      }\r\n      if(this.resultContent == ''){\r\n        this.$message({type:\"warning\",message:'请选择内容配置',center:\"true\"});\r\n        return\r\n      }\r\n      let params = {\r\n        ProjectID:this.ProjectID,\r\n        ReportName: this.dataName,\r\n        AIReportType: this.resultContent,\r\n        BuildingName: this.storiedBuilding,\r\n        LevelName: this.floor,\r\n        StartTime: this.startTime,\r\n        EndTime: this.endTime,\r\n      }\r\n      // console.log(params)\r\n      this.load();\r\n      this.Request(GetCustomFormExport(params)).then(res=>{\r\n        this.$toast.clear();\r\n        // console.log('自定义表格导出',res)\r\n        if(res.StatusCode=='200'){\r\n          this.$message({type:'success',message:res.Message,center:'true'})\r\n          this.$router.push({path:'nav/index/AI-report',query:{'active':4}})\r\n        }else{\r\n          this.$message({type:\"error\",message:res.Message,center:\"true\"});\r\n        }\r\n      })\r\n      \r\n    },\r\n    //返回\r\n    goBack() {\r\n      this.$router.back(-1)\r\n    },\r\n    /**\r\n     * 格式化日期\r\n     */\r\n    formatterTime(time) {\r\n      if (!time) return \"\";\r\n      return time.substring(0, time.indexOf(\"u\"));\r\n    },\r\n    toggle(index,item) { //复选框\r\n      this.$refs.checkboxes[index].toggle();\r\n      let contentVal = ''\r\n      for(let item of this.resultContent){ // 返现对应的文字\r\n        contentVal += this.contentConfigurationList[item].text\r\n      }\r\n      this.contentConfiguration = contentVal\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.list-content{\r\n        margin-top:46px;\r\n        overflow:scroll;\r\n    }\r\n    .list-item{\r\n        text-align:center;\r\n    }\r\n/* 顶部表头 */\r\n.container-ai-report .van-nav-bar .van-nav-bar__title {\r\n    font-size: 36px;\r\n    font-weight: 400;\r\n}\r\n.container-ai-report  .van-nav-bar {\r\n    height: 88px;\r\n    line-height: 88px;\r\n }\r\n/* 自定义表单列表 */\r\n.custom-report-list{width: 100%;height: auto;margin-top: 100px;}\r\n.custom-report-list ul{height: auto;border-top: 1px solid #e9e9e9;background: #fff;padding: 0 20px;}\r\n.custom-report-list ul li{width: 100%;height: 80px;line-height: 80px;padding: 4px 0; border-bottom: 1px solid #e9e9e9;font-size: 26px;}\r\n.custom-report-list ul li span{color: #323233;}\r\n.custom-report-list-span{float: left;}\r\n.custom-report-list-input{float: right;width: 80%;height: 80px;line-height: 80px; text-align: right;}\r\n.custom-report-list ul li .van-cell{padding: 0;height: 80px;line-height: 80px;font-size: 26px;}\r\n.custom-report-list ul li .van-cell .van-cell__right-icon{padding-top: 30px;font-size: 30px;}\r\n.van-picker__toolbar{height: 60px;line-height: 60px;}\r\n.van-picker__toolbar .van-picker__cancel,.van-picker__toolbar .van-picker__confirm{font-size: 26px;}\r\n.custom-report-tag{padding:0 20px;}\r\n.custom-report-tag p{width: 100%;height: 80px;line-height: 80px;font-size: 26px;color: #323233;}\r\n.custom-report-tag-list{width: 90%; display: flex;flex-wrap: wrap}\r\n.custom-report-tag-list span{display: inline-block;text-align: center; width: 136px;height: 47px;line-height: 47px; border:1px solid #5a92ff;border-radius: 10px;font-size: 26px;color: #5a92ff;margin:0 20px 20px 0;}\r\n.custom-report-bt{width: 94%;margin: 40px auto 0;display: block;border: none;border-radius: 20px;height: 80px;font-size: 28px;background: #5a92ff;color: #fff;}\r\n.content-class .van-cell__value span{width: 100%;display: inline-block;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\r\n.content-class-popup .van-cell{font-size: 26px;padding: 20px;}\r\n</style>"],"sourceRoot":"src/components/AI-report"}]}