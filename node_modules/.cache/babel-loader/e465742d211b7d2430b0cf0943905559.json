{"remainingRequest":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Public\\软件\\app\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\apiResponse.js","dependencies":[{"path":"C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\apiResponse.js","mtime":1553246876917},{"path":"C:\\Users\\Public\\软件\\app\\.babelrc","mtime":1553246877633},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552270042041},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1552270024016},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1552270038615}],"contextDependencies":[],"result":["import _JSON$stringify from \"C:\\\\Users\\\\Public\\\\\\u8F6F\\u4EF6\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Public\\\\\\u8F6F\\u4EF6\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/**\n * 公共请求\n */\nexport default {\n  methods: {\n    /**\n     * 存状态管理方式\n     * @param {接口} Interface \n     * @param {状态管理的方法名} vuexMethods \n     * @param {状态管理的属性} vuexValue \n     * @param {刷新} refresh \n     */\n    getDataByVuex: function () {\n      var _getDataByVuex = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(Interface, params, vuexMethods, vuexValue) {\n        var refresh,\n            data,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                refresh = _args.length > 4 && _args[4] !== undefined ? _args[4] : false;\n                data = this.$store.state[vuexValue]; // console.log(data)\n\n                if (!(data.length == 0 || data === null || data === '' || data === undefined || refresh)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 5;\n                return this.Request(Interface(params));\n\n              case 5:\n                data = _context.sent;\n\n                if (!(data.StatusCode === 200)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // console.log(data)\n                this.$store.commit(vuexMethods, data.Detiel);\n                return _context.abrupt(\"return\", data.Detiel);\n\n              case 11:\n                this.$store.commit(vuexMethods, null);\n                this.$message({\n                  type: 'error',\n                  message: data.Message,\n                  center: 'true'\n                });\n                return _context.abrupt(\"return\", null);\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                return _context.abrupt(\"return\", data);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getDataByVuex(_x, _x2, _x3, _x4) {\n        return _getDataByVuex.apply(this, arguments);\n      }\n\n      return getDataByVuex;\n    }(),\n\n    /**\n     * sessionStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} sessionName \n     * @param {刷新} refresh\n     */\n    getDataBySessionStorage: function () {\n      var _getDataBySessionStorage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(Interface, params, sessionName) {\n        var refresh,\n            data,\n            list,\n            _args2 = arguments;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                refresh = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : false;\n                data = null;\n\n                try {\n                  data = JSON.parse(sessionStorage.getItem(sessionName));\n                } catch (e) {\n                  console.log('session为非对象字符串');\n                  data = sessionStorage.getItem(sessionName);\n                } // console.log(data, data === '' , data === null , data === undefined , refresh)\n\n\n                if (!(data == '' || data == null || data == undefined || refresh)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.Request(Interface(params));\n\n              case 6:\n                list = _context2.sent;\n\n                if (!(list.StatusCode === 200)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                sessionStorage.setItem(sessionName, _JSON$stringify(list.Detiel));\n                return _context2.abrupt(\"return\", list.Detiel);\n\n              case 12:\n                this.$message({\n                  type: 'error',\n                  message: list.Message,\n                  center: 'true'\n                });\n                return _context2.abrupt(\"return\", null);\n\n              case 14:\n                _context2.next = 17;\n                break;\n\n              case 16:\n                return _context2.abrupt(\"return\", data);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDataBySessionStorage(_x5, _x6, _x7) {\n        return _getDataBySessionStorage.apply(this, arguments);\n      }\n\n      return getDataBySessionStorage;\n    }(),\n\n    /**\n     * 第二种方式 ，只是返回list\n     * sessionStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} sessionName \n     * @param {刷新} refresh\n     */\n    getDataBySessionStorageAll: function () {\n      var _getDataBySessionStorageAll = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(Interface, params, sessionName) {\n        var refresh,\n            data,\n            list,\n            _args3 = arguments;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                refresh = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;\n                data = null;\n\n                try {\n                  data = JSON.parse(sessionStorage.getItem(sessionName));\n                } catch (e) {\n                  console.log('session为非对象字符串');\n                  data = sessionStorage.getItem(sessionName);\n                } // console.log(data, data === '' , data === null , data === undefined , refresh)\n\n\n                if (!(data == '' || data == null || data == undefined || refresh)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.Request(Interface(params));\n\n              case 6:\n                list = _context3.sent;\n\n                if (!(list.StatusCode === 200)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                sessionStorage.setItem(sessionName, _JSON$stringify(list));\n                return _context3.abrupt(\"return\", list);\n\n              case 12:\n                this.$message({\n                  type: 'error',\n                  message: list.Message,\n                  center: 'true'\n                });\n                return _context3.abrupt(\"return\", null);\n\n              case 14:\n                _context3.next = 17;\n                break;\n\n              case 16:\n                return _context3.abrupt(\"return\", data);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getDataBySessionStorageAll(_x8, _x9, _x10) {\n        return _getDataBySessionStorageAll.apply(this, arguments);\n      }\n\n      return getDataBySessionStorageAll;\n    }(),\n\n    /**\n     * localStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} localName\n     * @param {刷新} refresh\n     * \n     * 注意：缓存中可能存放非对象字符串。\n     */\n    getDataByLocalStorage: function () {\n      var _getDataByLocalStorage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(Interface, localName) {\n        var refresh,\n            data,\n            list,\n            _args4 = arguments;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                refresh = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : false;\n                data = null;\n\n                try {\n                  data = JSON.parse(localStorage.getItem(localName));\n                } catch (e) {\n                  console.log('localName为非对象字符串');\n                  data = localStorage.getItem(localName);\n                }\n\n                if (!(data === '' || data === null || data === undefined || refresh)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.next = 6;\n                return this.Request(Interface);\n\n              case 6:\n                list = _context4.sent;\n\n                if (!(list.StatusCode === 200)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                localStorage.setItem(localName, _JSON$stringify(list.Detiel));\n                return _context4.abrupt(\"return\", list.Detiel);\n\n              case 12:\n                this.$message({\n                  type: 'error',\n                  message: list.Message,\n                  center: 'true'\n                });\n                return _context4.abrupt(\"return\", null);\n\n              case 14:\n                _context4.next = 17;\n                break;\n\n              case 16:\n                return _context4.abrupt(\"return\", data);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getDataByLocalStorage(_x11, _x12) {\n        return _getDataByLocalStorage.apply(this, arguments);\n      }\n\n      return getDataByLocalStorage;\n    }()\n  }\n};",{"version":3,"sources":["C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\apiResponse.js"],"names":["methods","getDataByVuex","Interface","params","vuexMethods","vuexValue","refresh","data","$store","state","length","undefined","Request","StatusCode","commit","Detiel","$message","type","message","Message","center","getDataBySessionStorage","sessionName","JSON","parse","sessionStorage","getItem","e","console","log","list","setItem","getDataBySessionStorageAll","getDataByLocalStorage","localName","localStorage"],"mappings":"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","sourcesContent":["/**\n * 公共请求\n */\nexport default {\n  methods:{\n    /**\n     * 存状态管理方式\n     * @param {接口} Interface \n     * @param {状态管理的方法名} vuexMethods \n     * @param {状态管理的属性} vuexValue \n     * @param {刷新} refresh \n     */\n    async getDataByVuex(Interface, params, vuexMethods, vuexValue,refresh = false) {\n      let data = this.$store.state[vuexValue]\n      // console.log(data)\n      if (data.length==0 || data === null || data === '' || data === undefined || refresh) { // 没有则重新请求\n        data = await this.Request(Interface(params))\n        if (data.StatusCode === 200) {\n          // console.log(data)\n          this.$store.commit(vuexMethods, data.Detiel)\n          return data.Detiel\n        } else {\n          this.$store.commit(vuexMethods, null)\n          this.$message({ type: 'error', message: data.Message, center: 'true' })\n          return null\n        }\n      } else {\n        return data\n      }\n    },\n    /**\n     * sessionStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} sessionName \n     * @param {刷新} refresh\n     */\n    async getDataBySessionStorage(Interface,params, sessionName, refresh = false) {\n      let data=null\n      try{\n        data= JSON.parse(sessionStorage.getItem(sessionName))\n      }catch(e){\n        console.log('session为非对象字符串')\n        data = sessionStorage.getItem(sessionName)\n      }\n      // console.log(data, data === '' , data === null , data === undefined , refresh)\n      if (data == '' || data == null || data == undefined || refresh) {\n        let list = await this.Request(Interface(params))\n        if (list.StatusCode === 200) {\n          sessionStorage.setItem(sessionName, JSON.stringify(list.Detiel))\n          return list.Detiel\n        } else {\n          this.$message({ type: 'error', message: list.Message, center: 'true' })\n          return null\n        }\n      } else {\n        return data\n      }\n    },\n    /**\n     * 第二种方式 ，只是返回list\n     * sessionStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} sessionName \n     * @param {刷新} refresh\n     */\n    async getDataBySessionStorageAll(Interface, params, sessionName, refresh = false) {\n      let data = null\n      try {\n        data = JSON.parse(sessionStorage.getItem(sessionName))\n      } catch (e) {\n        console.log('session为非对象字符串')\n        data = sessionStorage.getItem(sessionName)\n      }\n      // console.log(data, data === '' , data === null , data === undefined , refresh)\n      if (data == '' || data == null || data == undefined || refresh) {\n        let list = await this.Request(Interface(params))\n        if (list.StatusCode === 200) {\n          sessionStorage.setItem(sessionName, JSON.stringify(list))\n          return list\n        } else {\n          this.$message({ type: 'error', message: list.Message, center: 'true' })\n          return null\n        }\n      } else {\n        return data\n      }\n    },\n\n    /**\n     * localStorage缓存方式\n     * 单条存储数据最大不超过2M\n     * @param {接口} Interface\n     * @param {缓存KEY} localName\n     * @param {刷新} refresh\n     * \n     * 注意：缓存中可能存放非对象字符串。\n     */\n    async getDataByLocalStorage(Interface, localName, refresh = false) {\n      let data = null\n      try {\n        data = JSON.parse(localStorage.getItem(localName))\n      } catch (e) {\n        console.log('localName为非对象字符串')\n        data = localStorage.getItem(localName)\n      }\n      if (data === '' || data === null || data === undefined || refresh) {\n        let list = await this.Request(Interface)\n        if (list.StatusCode === 200) {\n          localStorage.setItem(localName, JSON.stringify(list.Detiel))\n          return list.Detiel\n        } else {\n          this.$message({ type: 'error', message: list.Message, center: 'true' })\n          return null\n        }\n      } else {\n        return data\n      }\n    },\n\n  }\n}"]}]}