{"remainingRequest":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Public\\软件\\app\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\Exception.js","dependencies":[{"path":"C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\Exception.js","mtime":1557224509290},{"path":"C:\\Users\\Public\\软件\\app\\.babelrc","mtime":1553246877633},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552270042041},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1552270024016},{"path":"C:\\Users\\Public\\软件\\app\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1552270038615}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Public\\\\\\u8F6F\\u4EF6\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//异常处理类\nexport default {\n  // 200,300,400,401,405,415,404,500\n  methods: {\n    // 返回对象数组\n    Request: function () {\n      var _Request = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(functionName) {\n        var arr;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return functionName;\n\n              case 3:\n                arr = _context.sent;\n\n                if (!(arr.StatusCode == 401)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                console.error('token过期或未认证');\n                localStorage.removeItem('token'); // this.$toast.fail('请重新登录');\n\n                this.$message({\n                  message: '请重新登录',\n                  type: 'error',\n                  center: 'true'\n                });\n                this.$toast.clear(); // 清除蒙层\n\n                this.$store.commit('upisLogined', false);\n                _context.next = 22;\n                break;\n\n              case 12:\n                // 返回的情况就只有300失败 和 200成功 再具体根据业务去判断\n                // 如果返回值为null，也转成数组\n                if (arr.Detiel == null) {\n                  arr.Detiel = [];\n                }\n\n                if (arr.StatusCode === 300) {\n                  this.$message({\n                    type: 'error',\n                    message: arr.Message,\n                    center: 'true'\n                  });\n                } // console.log('请求成功,返回成功数据：', arr)\n                // 帐号密码输入出错\n\n\n                if (arr.Message == '账号或密码错误...') {\n                  this.$message({\n                    type: 'error',\n                    message: '账号或密码错误...',\n                    center: 'true'\n                  });\n                } // 如果失效，则重新登录\n\n\n                if (!(arr.Message == '提交失败！当前用户登录状态已失效，请重新登录' || arr.Message == \"当前用户未登录成功或登录超时，请重新登录！\" || arr.Message == \"您尚未登录或登录已超时，请重新登录！\")) {\n                  _context.next = 21;\n                  break;\n                }\n\n                this.$message({\n                  message: '请重新登录',\n                  type: 'error',\n                  center: 'true'\n                });\n                this.$toast.clear(); // 清除蒙层\n\n                console.log('$c token无效', 'color:red');\n                this.$store.commit('upisLogined', false);\n                return _context.abrupt(\"return\");\n\n              case 21:\n                return _context.abrupt(\"return\", arr);\n\n              case 22:\n                _context.next = 51;\n                break;\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('HTTP错误代码', _context.t0); // 处理HTTP状态\n\n                _context.t1 = _context.t0;\n                _context.next = _context.t1 === 400 ? 30 : _context.t1 === 401 ? 34 : _context.t1 === 404 ? 40 : _context.t1 === 408 ? 42 : _context.t1 === 415 ? 45 : _context.t1 === 500 ? 47 : 50;\n                break;\n\n              case 30:\n                console.error('由于语法格式有误，服务器无法理解此请求。不作修改，客户程序就无法重复此请求');\n                this.$toast.clear(); // 清除蒙层\n\n                this.$message({\n                  message: '请求失败',\n                  type: 'error'\n                });\n                return _context.abrupt(\"break\", 51);\n\n              case 34:\n                this.$message({\n                  message: '请重新登录',\n                  type: 'error',\n                  center: 'true'\n                });\n                localStorage.removeItem('token');\n                this.$router.push({\n                  path: '/login'\n                });\n                this.$store.commit('upisLogined', false);\n                this.$toast.clear(); // 清除蒙层\n\n                return _context.abrupt(\"break\", 51);\n\n              case 40:\n                console.error('404错误,返回上一层');\n                return _context.abrupt(\"break\", 51);\n\n              case 42:\n                this.$toast.clear(); // 清除蒙层\n\n                this.$message({\n                  message: '请求超时',\n                  type: 'error',\n                  center: 'true'\n                });\n                return _context.abrupt(\"break\", 51);\n\n              case 45:\n                console.error('请求头报错，刷新页面');\n                return _context.abrupt(\"break\", 51);\n\n              case 47:\n                this.$toast.clear(); // 清除蒙层\n\n                this.$message({\n                  message: '服务器错误',\n                  type: 'error',\n                  center: 'true'\n                });\n                return _context.abrupt(\"break\", 51);\n\n              case 50:\n                console.error('返回错误信息：', _context.t0);\n\n              case 51:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 24]]);\n      }));\n\n      function Request(_x) {\n        return _Request.apply(this, arguments);\n      }\n\n      return Request;\n    }()\n  }\n};",{"version":3,"sources":["C:\\Users\\Public\\软件\\app\\src\\common\\mixins\\Exception.js"],"names":["methods","Request","functionName","arr","StatusCode","console","error","localStorage","removeItem","$message","message","type","center","$toast","clear","$store","commit","Detiel","Message","log","$router","push","path"],"mappings":"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","sourcesContent":["//异常处理类\nexport default {\n  // 200,300,400,401,405,415,404,500\n  methods: {\n    // 返回对象数组\n    async Request(functionName) {\n      try {\n        let arr = await functionName\n        // 处理 response状态码，与后台约定\n        if (arr.StatusCode == 401) {\n          console.error('token过期或未认证')\n          localStorage.removeItem('token')\n          // this.$toast.fail('请重新登录');\n          this.$message({ message: '请重新登录', type: 'error' ,center:'true'})\n          this.$toast.clear(); // 清除蒙层\n          this.$store.commit('upisLogined', false)\n        } else {\n          // 返回的情况就只有300失败 和 200成功 再具体根据业务去判断\n          // 如果返回值为null，也转成数组\n          if (arr.Detiel == null) {\n            arr.Detiel = []\n          }\n          if (arr.StatusCode === 300) {\n            this.$message({ type: 'error', message: arr.Message, center: 'true' })\n          }\n          // console.log('请求成功,返回成功数据：', arr)\n          // 帐号密码输入出错\n          if ( arr.Message =='账号或密码错误...'){\n            this.$message({ type: 'error', message: '账号或密码错误...', center: 'true'})\n          }\n          // 如果失效，则重新登录\n          if (arr.Message == '提交失败！当前用户登录状态已失效，请重新登录' || arr.Message == \"当前用户未登录成功或登录超时，请重新登录！\" || arr.Message == \"您尚未登录或登录已超时，请重新登录！\") {\n            this.$message({ message: '请重新登录', type: 'error', center: 'true'})\n            this.$toast.clear(); // 清除蒙层\n            console.log('$c token无效','color:red')\n            this.$store.commit('upisLogined', false)\n            return\n          }\n          \n          return arr\n        }\n      } catch (error) {\n        console.log('HTTP错误代码',error)\n        // 处理HTTP状态\n        switch (error) {\n          case 400:\n            console.error('由于语法格式有误，服务器无法理解此请求。不作修改，客户程序就无法重复此请求')\n            this.$toast.clear(); // 清除蒙层\n            this.$message({ message: '请求失败', type: 'error' })\n            break;\n          case 401:\n            this.$message({ message: '请重新登录', type: 'error',center:'true' })\n            localStorage.removeItem('token')\n            this.$router.push({ path: '/login' })\n            this.$store.commit('upisLogined', false)\n            this.$toast.clear(); // 清除蒙层\n            break;\n          case 404:\n            console.error('404错误,返回上一层')\n            break;\n          case 408:\n            this.$toast.clear(); // 清除蒙层\n            this.$message({ message: '请求超时', type: 'error', center: 'true'})\n            break;\n          case 415:\n            console.error('请求头报错，刷新页面')\n            break;\n          case 500:\n            this.$toast.clear(); // 清除蒙层\n            this.$message({ message: '服务器错误', type: 'error', center: 'true'})\n            break;\n          default:\n            console.error('返回错误信息：', error)\n        }\n      }\n    }\n  }\n}\n"]}]}