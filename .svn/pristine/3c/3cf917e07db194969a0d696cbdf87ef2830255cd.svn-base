<!-- Risk风险管理 -->
<template>
  <div class="container-risk">
    <!-- 头部 -->
    <van-nav-bar title="风险管理" @click-left="goBack" @click-right="goProblemAnalysis" fixed :border="false" :z-index="100" class="my-nav-bar">
      <span class="el-icon-arrow-left fontsize" slot="left"></span>
      <img src="../../../assets/imgs/speed_of_progress.png" class="speed_of_progress fontsize" slot="right">
    </van-nav-bar>
    <div class="wrapper">
      <van-tabs v-model="active" swipeable animated sticky @change="handleIndex" class="my-tabs">
        <van-tab v-for="item in titleArr" :title="item.label" :key="item.value">
          <!-- 隔层 -->
          <div class="interlayer"></div>
          <!-- 表格 -->
          <el-table :data="tableData" style="width: 100%" @row-click="clickRow" class="my-table">
            <el-table-column type="index" align="center" label="序号" width="50"></el-table-column>
            <el-table-column prop="Subject" align="center" label="主题" :show-overflow-tooltip="true"></el-table-column>
            <el-table-column prop="ProblemType" align="center" label="问题类型"></el-table-column>
            <el-table-column prop="Status" align="center" label="状态" :formatter="formatterState" width="50"></el-table-column>
          </el-table>
        </van-tab>
      </van-tabs>
    </div>
  </div>
</template>

<script type='textecmascript-6'>
import { GetRiskList } from "@/api/api.js";
export default {
  data() {
    return {
      ProjectID: localStorage.getItem('projectid'), //项目ID
      userID: localStorage.getItem("userId"), //用户ID
      dataIng: [],  //待接收
      dataHandle: [],  //整改中
      dataOver: [],  //已完成
      ingLoading: false,
      handleLoading: false,
      overLoading: false,
      pageSize: 20,
      ingCurrentPage: 1,
      ingPageTotal: 0,  //待接收数
      handleCurrentPage: 1,
      handlePageTotal: 0,  //整改中数
      overCurrentPage: 1,
      overPageTotal: 0,  //已整改数
      active: this.$route.query.active, //tab默认位置
      titleArr: [
        { value: 0, label: "整改中（0条）" },
        { value: 1, label: "待接收（0条）" },
        { value: 2, label: "已整改（0条）" }
      ],
      tableData: []
    };
  },
  created() {
    this.getRiskIng();  //待接收
    this.getRiskHandle();  //整改中
    this.getRiskOver();  //已整改
  },
  methods: {
    /**
     * @name 根据项目ID和状态获取风险管理问题列表（待接收）
     * @param {string} projectId 项目ID
     * @param {string} status 状态 0： 未整改 1： 整改中 2： 已整改
     * @param {integer} pageIndex 页码
     * @param {integer} pageSize 页大小
     */
    getRiskIng(){
      this.ingLoading = true;
      let params = {
        ProjectID: this.ProjectID,
        status: 0,
        pageIndex: this.ingCurrentPage,
        pageSize: this.pageSize
      }
      this.Request(
        GetRiskList(params),
      ).then(data => {
        if (data.StatusCode === 200) {
          if(data.Detiel.length != 0){
            this.ingPageTotal = parseInt(data.Count);
            this.titleArr[1].label = "待接收（"+ parseInt(data.Count) +"条）"
            this.dataIng = data.Detiel;
            if(this.active === 1){
              this.tableData = this.dataIng
            }
          }
        } else {
          this.$message({
            type: "error",
            message: data.Message,
            center: "true"
          });
        }
        this.ingLoading = false;
      });
    },
    /**
     * @name 根据项目ID和状态获取风险管理问题列表（整改中）
     * @param {string} projectId 项目ID
     * @param {string} status 状态 0： 未整改 1： 整改中 2： 已整改
     * @param {integer} pageIndex 页码
     * @param {integer} pageSize 页大小
     */
    getRiskHandle(){
      this.handleLoading = true;
      let params = {
        ProjectID: this.ProjectID,
        status: 1,
        pageIndex: this.handleCurrentPage,
        pageSize: this.pageSize
      }
      this.Request(
        GetRiskList(params),
      ).then(data => {
        if (data.StatusCode === 200) {
          if(data.Detiel.length != 0){
            this.handlePageTotal = parseInt(data.Count);
            this.titleArr[0].label = "整改中（"+ parseInt(data.Count) +"条）"
            this.dataHandle = data.Detiel;
            if(this.active === 0){
              this.tableData = this.dataHandle
            }
          }
        } else {
          this.$message({
            type: "error",
            message: data.Message,
            center: "true"
          });
        }
        this.handleLoading = false;
      });
    },
    /**
     * @name 根据项目ID和状态获取风险管理问题列表（已整改）
     * @param {string} projectId 项目ID
     * @param {string} status 状态 0： 未整改 1： 整改中 2： 已整改
     * @param {integer} pageIndex 页码
     * @param {integer} pageSize 页大小
     */
    getRiskOver(){
      this.overLoading = true;
      let params = {
        ProjectID: this.ProjectID,
        status: 2,
        pageIndex: this.overCurrentPage,
        pageSize: this.pageSize
      }
      this.Request(
        GetRiskList(params),
      ).then(data => {
        if (data.StatusCode === 200 && typeof("data.StatusCode") != "undefined") {
          if(data.Detiel.length != 0){
            this.overPageTotal = parseInt(data.Count);
            this.titleArr[2].label = "已整改（"+ parseInt(data.Count) +"条）"
            this.dataOver = data.Detiel;
            if(this.active === 2){
              this.tableData = this.dataOver
            }
          }
        } else {
          this.$message({
            type: "error",
            message: data.Message,
            center: "true"
          });
        }
        this.overLoading = false;
      });
    },
    //tab切换
    handleIndex() {
      console.log("active", this.active);
      switch (this.active) {
        case 0:
          {
            this.tableData = this.dataHandle
          }
          break;
        case 1:
          {
            this.tableData = this.dataIng
          }
          break;
        case 2:
          {
            this.tableData = this.dataOver
          }
          break;
      
        default:
          break;
      }
    },
    formatterState(row, column){
      return row.Status + "/3"
    },
    //返回
    goBack() {
      this.$router.push({ path: "/nav/to/index" });
    },
    //跳转问题类型分析
    goProblemAnalysis() {
      this.$router.push({ path: "/ProblemAnalysis" });
    },
    //点击表格行
    clickRow(row) {
      console.log('row',row)
      this.$router.push({ path: "/riskDetails", query: {active: this.active, riskID: row.ID, state: row.Status} });
    },
  },
  mounted(){},
  watch:{
    // active(v){
    //   console.log("-------",v)
    // }
    // $route: {
    //   handler: function(val, oldVal){
    //     console.log("==",val);
    //   },
    //   // 深度观察监听
    //   deep: true
    // }
  }
};
</script>
<style lang='stylus' scoped rel='stylesheet/stylus'>
.container-risk
  width 100%
  height 100%
  .van-nav-bar
    // height 88px
    // line-height 88px
    // border-bottom 1px solid #E5E5E5
    .fontsize
      // font-size 42px
      // color #333
      // display inline-block
      // vertical-align middle
    .speed_of_progress
      width 36px
      height 36px
  .wrapper
    margin-top 88px
    .interlayer
      width 100%
      height 26px
      background-color #F6F8FA
</style>
<style>
@import "~@/assets/css/resetVant.css";
/* 顶部表头 */
/* .container-risk .van-nav-bar .van-nav-bar__title {
  font-size: 36px;
} */
/*tab切换栏*/
/* .container-risk .van-tab span {
  font-size: 30px;
  line-height: 80px;
}
.container-risk .van-tabs--line .van-tabs__wrap {
  height: 80px;
}
.container-risk .van-tabs--line .van-tabs__wrap {
  color: #666;
  position: fixed;
  top: 88px !important;
}
.container-risk .van-tabs--line .van-tabs__wrap .van-tabs__nav {
  background-color: #fff;
}
.container-risk .van-tab--active {
  color: #5a92ff;
} */
/* tab下边线 */
/* .container-risk .van-hairline--top-bottom::after {
  border-width: 0 0 2px 0;
}
.container-risk .van-tabs--line {
  padding-top: 80px;
}
 */
.container-risk .van-tabs__line {
  background-color: #5a92ff;
}
/*表格*/
.container-risk .el-table thead tr th {
  background-color: #5892ff;
  color: #fff;
}
/* .container-risk .el-table {
  color: #333;
  font-size: 24px;
}
.container-risk .el-table .cell {
  line-height: 76px;
}
.container-risk .el-table th div {
  vertical-align: middle;
  color: #fff;
} */
</style>
